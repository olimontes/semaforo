COMPARAÇÃO: VERSÃO COM SEMÁFORO vs VERSÃO COM ERROS
==================================================

OBJETIVO:
Demonstrar a diferença entre um sistema com controle de concorrência adequado (semáforo) 
e um sistema sem proteção que sofre de race conditions.

=== ARQUIVOS CRIADOS ===

1. restaurante_semaforo.php - Versão CORRETA com semáforo
2. restaurante_com_erros.php - Versão INCORRETA sem semáforo 
3. teste_validacao.php - Teste da versão correta
4. teste_erros.php - Teste da versão com erros

=== PRINCIPAIS DIFERENÇAS NO CÓDIGO ===

VERSÃO COM SEMÁFORO (CORRETA):
✅ Cria semáforo: sem_get($sem_key, 1)
✅ Protege região crítica: sem_acquire($sem_id)
✅ Libera após uso: sem_release($sem_id)
✅ Operações atômicas garantidas
✅ Apenas 1 processo por vez acessa a fila

VERSÃO SEM SEMÁFORO (COM ERROS):
❌ Não cria semáforo
❌ Região crítica desprotegida
❌ Múltiplos processos acessam simultaneamente
❌ Race conditions garantidas
❌ Operações não atômicas

=== PROBLEMAS DEMONSTRADOS NA VERSÃO COM ERROS ===

1. RACE CONDITION CRÍTICA:
   - Todos os 5 cozinheiros leem o mesmo pedido (pedido 0)
   - Resultado: "Cozinheiro X: Peguei pedido 0" (5 vezes)

2. CORRUPÇÃO DE MEMÓRIA COMPARTILHADA:
   - Warning: "Variable data in shared memory is corrupted"
   - Causa: Escritas simultâneas corrompem os dados

3. PEDIDOS PERDIDOS:
   - Esperado: 100 pedidos processados
   - Obtido: Apenas 1 pedido processado
   - Perdidos: 99 pedidos (99% de perda!)

4. INCONSISTÊNCIA DE DADOS:
   - Soma esperada: 4950
   - Soma obtida: 0
   - Diferença: -4950 (100% de erro)

5. ESTADO FINAL INCONSISTENTE:
   - Apenas 1 cozinheiro registrou ter processado algo
   - Os outros 4 cozinheiros não têm registro algum
   - Fila completamente corrompida

=== RESULTADOS DOS TESTES ===

VERSÃO COM SEMÁFORO:
✅ 10/10 testes bem-sucedidos (100% de sucesso)
✅ Todos os 100 pedidos sempre processados
✅ Zero pedidos duplicados
✅ Zero pedidos perdidos
✅ Fila sempre vazia ao final
✅ Soma matemática sempre correta

VERSÃO SEM SEMÁFORO:
❌ 1/5 testes com erros graves detectados (20% de falha)
❌ 99 pedidos perdidos em um teste
❌ Corrupção de memória compartilhada
❌ Pedidos duplicados detectados
❌ Soma matemática completamente incorreta

=== TIPOS DE PROBLEMAS DE CONCORRÊNCIA DEMONSTRADOS ===

1. RACE CONDITION:
   Definição: Quando o resultado depende da ordem de execução dos processos
   Exemplo: Múltiplos cozinheiros leem o mesmo pedido antes de removê-lo

2. OPERAÇÕES NÃO ATÔMICAS:
   Definição: Operações que podem ser interrompidas no meio
   Exemplo: Ler fila → Modificar fila → Salvar fila (3 operações separadas)

3. REGIÃO CRÍTICA DESPROTEGIDA:
   Definição: Código que acessa recursos compartilhados sem proteção
   Exemplo: Acesso à fila de pedidos sem semáforo

4. CORRUPÇÃO DE DADOS:
   Definição: Dados ficam em estado inconsistente
   Exemplo: Escritas simultâneas corrompem a memória compartilhada

5. CONDIÇÃO DE DISPUTA (RACE CONDITION):
   Definição: Resultado incorreto devido a timing entre processos
   Exemplo: Processo A lê, Processo B modifica, Processo A salva dados antigos

=== COMENTÁRIOS EXPLICATIVOS NO CÓDIGO COM ERROS ===

O arquivo restaurante_com_erros.php contém comentários detalhados:

❌ PROBLEMA 1: NÃO CRIAMOS SEMÁFORO PARA CONTROLE DE CONCORRÊNCIA
❌ PROBLEMA 2: SEM PROTEÇÃO DA REGIÃO CRÍTICA  
❌ PROBLEMA 3: CONDIÇÃO DE CORRIDA CRÍTICA
❌ PROBLEMA 4: LEITURA E MODIFICAÇÃO NÃO ATÔMICA
❌ PROBLEMA 5: DELAY INTENCIONAL PARA FORÇAR RACE CONDITION
❌ PROBLEMA 6: ATUALIZAÇÃO DO CONTADOR TAMBÉM SEM PROTEÇÃO
❌ PROBLEMA 7: SIMULAÇÃO DE TEMPO DE PREPARO
❌ PROBLEMA 8: PASSA APENAS $shm_id, SEM SEMÁFORO
❌ PROBLEMA 9: VERIFICAÇÃO FINAL PODE MOSTRAR INCONSISTÊNCIAS

=== LIÇÕES APRENDIDAS ===

1. SEMÁFOROS SÃO ESSENCIAIS:
   Sem eles, sistemas concorrentes falham de forma imprevisível

2. RACE CONDITIONS SÃO INTERMITENTES:
   Podem não aparecer em todos os testes, mas são garantidas sob alta concorrência

3. REGIÃO CRÍTICA DEVE SER PROTEGIDA:
   Qualquer acesso a recursos compartilhados precisa de sincronização

4. OPERAÇÕES DEVEM SER ATÔMICAS:
   Ler-modificar-escrever deve ser uma operação indivisível

5. TESTES EMPÍRICOS SÃO FUNDAMENTAIS:
   Só executando múltiplas vezes conseguimos detectar problemas de concorrência

=== CONCLUSÃO ===

A comparação demonstra claramente que:

✅ SEMÁFORO = SISTEMA CONFIÁVEL (100% de sucesso)
❌ SEM SEMÁFORO = SISTEMA FALHO (falhas graves e perda de dados)

O uso de semáforos é OBRIGATÓRIO em sistemas que compartilham recursos entre processos concorrentes. Sem eles, o sistema é imprevisível e não confiável para uso em produção.

Data: $(date)
Demonstração: Completa e bem-sucedida
